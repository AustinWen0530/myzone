(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{399:function(v,_,e){v.exports=e.p+"assets/img/wangluo.c7c4911f.jpg"},400:function(v,_,e){v.exports=e.p+"assets/img/jiexisuanfa.4366713e.jpg"},401:function(v,_,e){v.exports=e.p+"assets/img/render.169429bf.jpg"},470:function(v,_,e){"use strict";e.r(_);var t=e(2),s=Object(t.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"_3-1-网络请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-网络请求"}},[v._v("#")]),v._v(" 3.1 网络请求")]),v._v(" "),t("p",[v._v("在浏览器地址栏输入了百度的网址：")]),v._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("https://www.baidu.com/\n")])]),v._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[v._v("1")]),t("br")])]),t("p",[v._v("（1）"),t("strong",[v._v("构建请求")]),v._v("：GET /HTTP/1.1")]),v._v(" "),t("p",[v._v("（2）"),t("strong",[v._v("查找强缓存")]),v._v("：先检查强缓存，如果命中直接使用，否则进入下一步。")]),v._v(" "),t("p",[v._v("（3）"),t("strong",[v._v("DNS 解析")]),v._v("：由于我们输入的是域名，而数据包是通过"),t("code",[v._v("IP地址")]),v._v("传给对方的。因此我们需要得到域名对应的"),t("code",[v._v("IP地址")]),v._v("。这个过程需要依赖一个服务系统，这个系统将域名和 IP 一一映射，我们将这个系统就叫做"),t("strong",[v._v("DNS")]),v._v("（域名系统）。得到具体 IP 的过程就是"),t("code",[v._v("DNS")]),v._v("解析。")]),v._v(" "),t("p",[v._v("当然，值得注意的是，浏览器提供了"),t("strong",[v._v("DNS 数据缓存功能")]),v._v("。即如果一个域名已经解析过，那会把解析的结果缓存下来，下次处理直接走缓存，不需要经过 "),t("code",[v._v("DNS解析")]),v._v("。")]),v._v(" "),t("p",[v._v("另外，如果不指定端口的话，默认采用对应的 IP 的 80 端口。")]),v._v(" "),t("p",[v._v("（4）"),t("strong",[v._v("建立 TCP 连接")]),v._v("：")]),v._v(" "),t("p",[v._v("这里要提醒一点，Chrome 在同一个域名下要求同时最多只能有 6 个 TCP 连接，超过 6 个的话剩下的请求就得等待。")]),v._v(" "),t("p",[v._v("假设现在不需要等待，我们进入了 TCP 连接的建立阶段。首先解释一下什么是 TCP:")]),v._v(" "),t("blockquote",[t("p",[v._v("TCP（Transmission Control Protocol，传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层通信协议。")])]),v._v(" "),t("p",[v._v("建立 "),t("code",[v._v("TCP连接")]),v._v("经历了下面三个阶段:")]),v._v(" "),t("ol",[t("li",[v._v("通过"),t("strong",[v._v("三次握手")]),v._v("(即总共发送 3 个数据包确认已经建立连接)建立客户端和服务器之间的连接。")]),v._v(" "),t("li",[v._v("进行数据传输。这里有一个重要的机制，就是接收方接收到数据包后必须要向发送方"),t("code",[v._v("确认")]),v._v(", 如果发送方没有接到这个"),t("code",[v._v("确认")]),v._v("的消息，就判定为数据包丢失，并重新发送该数据包。当然，发送的过程中还有一个优化策略，就是把"),t("code",[v._v("大的数据包拆成一个个小包")]),v._v("，依次传输到接收方，接收方按照这个小包的顺序把它们"),t("code",[v._v("组装")]),v._v("成完整数据包。")]),v._v(" "),t("li",[v._v("断开连接的阶段。数据传输完成，现在要断开连接了，通过"),t("strong",[v._v("四次挥手")]),v._v("来断开连接。")])]),v._v(" "),t("p",[v._v("读到这里，你应该明白 TCP 连接通过什么手段来保证数据传输的可靠性，一是"),t("code",[v._v("三次握手")]),v._v("确认连接，二是"),t("code",[v._v("数据包校验")]),v._v("保证数据到达接收方，三是通过"),t("code",[v._v("四次挥手")]),v._v("断开连接。")]),v._v(" "),t("p",[v._v("当然，如果再深入地问，比如"),t("strong",[v._v("为什么要三次握手，两次不行吗？第三次握手失败了怎么办？为什么要四次挥手")]),v._v("等等这一系列的问题，涉及计算机网络的基础知识，比较底层，但是也是非常重要的细节，希望你能好好研究一下，另外这里有一篇不错的文章，"),t("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F86426969",target:"_blank",rel:"noopener noreferrer"}},[v._v("点击进入相应的推荐文章"),t("OutboundLink")],1),v._v("，相信这篇文章能给你启发。")]),v._v(" "),t("p",[v._v("（5）"),t("strong",[v._v("发送 HTTP 请求")])]),v._v(" "),t("p",[v._v("现在"),t("code",[v._v("TCP连接")]),v._v("建立完毕，浏览器可以和服务器开始通信，即开始发送 HTTP 请求。浏览器发 HTTP 请求要携带三样东西:"),t("strong",[v._v("请求行")]),v._v("、"),t("strong",[v._v("请求头")]),v._v("和"),t("strong",[v._v("请求体")]),v._v("。")]),v._v(" "),t("p",[v._v("首先，浏览器会向服务器发送"),t("strong",[v._v("请求行")]),v._v(",关于"),t("strong",[v._v("请求行")]),v._v("， 我们在这一部分的第一步就构建完了，贴一下内容:")]),v._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[v._v("// 请求方法是GET，路径为根路径，HTTP协议版本为1.1")]),v._v("\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[v._v("GET")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("/")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[v._v("HTTP")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("/")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("1.1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n复制代码"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v(";")]),v._v("\n")])]),v._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[v._v("1")]),t("br"),t("span",{staticClass:"line-number"},[v._v("2")]),t("br"),t("span",{staticClass:"line-number"},[v._v("3")]),t("br")])]),t("p",[v._v("结构很简单，由"),t("strong",[v._v("请求方法")]),v._v("、"),t("strong",[v._v("请求 URI")]),v._v("和"),t("strong",[v._v("HTTP 版本协议")]),v._v("组成。")]),v._v(" "),t("p",[v._v("同时也要带上"),t("strong",[v._v("请求头")]),v._v("，比如我们之前说的"),t("strong",[v._v("Cache-Control")]),v._v("、"),t("strong",[v._v("If-Modified-Since")]),v._v("、"),t("strong",[v._v("If-None-Match")]),v._v("都由可能被放入请求头中作为缓存的标识信息。当然了还有一些其他的属性，列举如下:")]),v._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3\nAccept-Encoding: gzip, deflate, br\nAccept-Language: zh-CN,zh;q=0.9\nCache-Control: no-cache\nConnection: keep-alive\nCookie: /* 省略cookie信息 */\nHost: www.baidu.com\nPragma: no-cache\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1\n复制代码\n")])]),v._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[v._v("1")]),t("br"),t("span",{staticClass:"line-number"},[v._v("2")]),t("br"),t("span",{staticClass:"line-number"},[v._v("3")]),t("br"),t("span",{staticClass:"line-number"},[v._v("4")]),t("br"),t("span",{staticClass:"line-number"},[v._v("5")]),t("br"),t("span",{staticClass:"line-number"},[v._v("6")]),t("br"),t("span",{staticClass:"line-number"},[v._v("7")]),t("br"),t("span",{staticClass:"line-number"},[v._v("8")]),t("br"),t("span",{staticClass:"line-number"},[v._v("9")]),t("br"),t("span",{staticClass:"line-number"},[v._v("10")]),t("br"),t("span",{staticClass:"line-number"},[v._v("11")]),t("br")])]),t("p",[v._v("最后是请求体，请求体只有在"),t("code",[v._v("POST")]),v._v("方法下存在，常见的场景是"),t("strong",[v._v("表单提交")]),v._v("。")]),v._v(" "),t("p",[v._v("（6）"),t("strong",[v._v("网络响应")])]),v._v(" "),t("p",[v._v("HTTP 请求到达服务器，服务器进行对应的处理。最后要把数据传给浏览器，也就是返回网络响应。")]),v._v(" "),t("p",[v._v("跟请求部分类似，网络响应具有三个部分:"),t("strong",[v._v("响应行")]),v._v("、"),t("strong",[v._v("响应头")]),v._v("和"),t("strong",[v._v("响应体")]),v._v("。")]),v._v(" "),t("p",[v._v("响应行类似下面这样:")]),v._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token constant"}},[v._v("HTTP")]),t("span",{pre:!0,attrs:{class:"token operator"}},[v._v("/")]),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("1.1")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[v._v("200")]),v._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[v._v("OK")]),v._v("\n复制代码\n")])]),v._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[v._v("1")]),t("br"),t("span",{staticClass:"line-number"},[v._v("2")]),t("br")])]),t("p",[v._v("由"),t("code",[v._v("HTTP协议版本")]),v._v("、"),t("code",[v._v("状态码")]),v._v("和"),t("code",[v._v("状态描述")]),v._v("组成。")]),v._v(" "),t("p",[v._v("响应头包含了服务器及其返回数据的一些信息, 服务器生成数据的时间、返回的数据类型以及对即将写入的 Cookie 信息。")]),v._v(" "),t("p",[v._v("举例如下:")]),v._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("Cache-Control: no-cache\nConnection: keep-alive\nContent-Encoding: gzip\nContent-Type: text/html;charset=utf-8\nDate: Wed, 04 Dec 2019 12:29:13 GMT\nServer: apache\nSet-Cookie: rsv_i=f9a0SIItKqzv7kqgAAgphbGyRts3RwTg%2FLyU3Y5Eh5LwyfOOrAsvdezbay0QqkDqFZ0DfQXby4wXKT8Au8O7ZT9UuMsBq2k; path=/; domain=.baidu.com\n复制代码\n")])]),v._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[v._v("1")]),t("br"),t("span",{staticClass:"line-number"},[v._v("2")]),t("br"),t("span",{staticClass:"line-number"},[v._v("3")]),t("br"),t("span",{staticClass:"line-number"},[v._v("4")]),t("br"),t("span",{staticClass:"line-number"},[v._v("5")]),t("br"),t("span",{staticClass:"line-number"},[v._v("6")]),t("br"),t("span",{staticClass:"line-number"},[v._v("7")]),t("br"),t("span",{staticClass:"line-number"},[v._v("8")]),t("br")])]),t("p",[v._v("响应完成之后怎么办？TCP 连接就断开了吗？")]),v._v(" "),t("p",[v._v("不一定。这时候要判断"),t("code",[v._v("Connection")]),v._v("字段, 如果请求头或响应头中包含"),t("strong",[v._v("Connection: Keep-Alive")]),v._v("，表示建立了持久连接，这样"),t("code",[v._v("TCP")]),v._v("连接会一直保持，之后请求统一站点的资源会复用这个连接。")]),v._v(" "),t("p",[v._v("否则断开"),t("code",[v._v("TCP")]),v._v("连接, 请求-响应流程结束。")]),v._v(" "),t("p",[v._v("完整的流程图如下所示：")]),v._v(" "),t("p",[t("img",{attrs:{src:e(399),alt:""}})]),v._v(" "),t("h2",{attrs:{id:"_3-2-解析请求返回值，生成布局树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-解析请求返回值，生成布局树"}},[v._v("#")]),v._v(" 3.2 解析请求返回值，生成布局树")]),v._v(" "),t("p",[v._v("完成了网络请求和响应，如果响应头中"),t("code",[v._v("Content-Type")]),v._v("的值是"),t("code",[v._v("text/html")]),v._v("，那么接下来就是浏览器的"),t("code",[v._v("解析")]),v._v("和"),t("code",[v._v("渲染")]),v._v("工作了。")]),v._v(" "),t("p",[v._v("首先来介绍"),t("strong",[v._v("解析")]),v._v("部分，主要分为以下几个步骤:")]),v._v(" "),t("ul",[t("li",[v._v("构建 "),t("code",[v._v("DOM")]),v._v("树")]),v._v(" "),t("li",[v._v("构建"),t("code",[v._v("CSSOM")]),v._v("树（样式计算）")]),v._v(" "),t("li",[v._v("生成"),t("code",[v._v("布局树")]),v._v("("),t("code",[v._v("Layout Tree")]),v._v(")")])]),v._v(" "),t("p",[v._v("（1）构建 DOM 树")]),v._v(" "),t("p",[v._v("由于浏览器无法直接理解"),t("code",[v._v("HTML字符串")]),v._v("，因此将这一系列的字节流转换为一种有意义并且方便操作的数据结构，这种数据结构就是"),t("code",[v._v("DOM树")]),v._v("。"),t("code",[v._v("DOM树")]),v._v("本质上是一个以"),t("code",[v._v("document")]),v._v("为根节点的多叉树。")]),v._v(" "),t("p",[v._v("（2）样式计算")]),v._v(" "),t("p",[v._v("关于 CSS 样式，它的来源一般是三种:")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("link 标签引用")])]),v._v(" "),t("li",[t("strong",[v._v("style 标签中的样式")])]),v._v(" "),t("li",[t("strong",[v._v("元素的内嵌 style 属性")])])]),v._v(" "),t("p",[v._v("第一步需要"),t("strong",[v._v("格式化样式表")]),v._v("：浏览器是无法直接识别 CSS 样式文本的，因此渲染引擎接收到 CSS 文本之后第一件事情就是将其转为一个结构化的对象，即 styleSheets。（通过浏览器 document.styleSheets）可以查看这个最终的结构。")]),v._v(" "),t("p",[v._v("第二步需要"),t("strong",[v._v("标准化样式属性")]),v._v("：有一些 CSS 样式的数值并不容易被渲染引擎所理解，因此需要在计算样式之前将它们标准化，如"),t("code",[v._v("em")]),v._v("->"),t("code",[v._v("px")]),v._v(","),t("code",[v._v("red")]),v._v("->"),t("code",[v._v("#ff0000")]),v._v(","),t("code",[v._v("bold")]),v._v("->"),t("code",[v._v("700")]),v._v("等等。")]),v._v(" "),t("p",[v._v("最后通过"),t("strong",[v._v("继承")]),v._v("和"),t("strong",[v._v("层叠")]),v._v("的方式生成"),t("strong",[v._v("CSSOM 树")]),v._v("。")]),v._v(" "),t("p",[v._v("（3）生成布局树")]),v._v(" "),t("p",[v._v("现在已经生成了"),t("code",[v._v("DOM树")]),v._v("和"),t("code",[v._v("DOM样式")]),v._v("，接下来要做的就是通过浏览器的布局系统"),t("code",[v._v("确定元素的位置")]),v._v("，也就是要生成一棵"),t("code",[v._v("布局树")]),v._v("(Layout Tree)。")]),v._v(" "),t("p",[v._v("布局树生成的大致工作如下:")]),v._v(" "),t("ol",[t("li",[v._v("遍历生成的 DOM 树节点，并把他们添加到"),t("code",[v._v("布局树中")]),v._v("。")]),v._v(" "),t("li",[v._v("计算布局树节点的坐标位置。")])]),v._v(" "),t("p",[v._v("值得注意的是，这棵布局树值包含可见元素，对于 "),t("code",[v._v("head")]),v._v("标签和设置了"),t("code",[v._v("display: none")]),v._v("的元素，将不会被放入其中。")]),v._v(" "),t("p",[v._v("有人说首先会生成"),t("code",[v._v("Render Tree")]),v._v("，也就是渲染树，其实这还是 16 年之前的事情，现在 Chrome 团队已经做了大量的重构，已经没有生成"),t("code",[v._v("Render Tree")]),v._v("的过程了。而布局树的信息已经非常完善，完全拥有"),t("code",[v._v("Render Tree")]),v._v("的功能。")]),v._v(" "),t("p",[v._v("之所以不讲布局的细节，是因为它过于复杂，一一介绍会显得文章过于臃肿，不过大部分情况下我们只需要知道它所做的工作"),t("strong",[v._v("是什么")]),v._v("即可，如果想深入其中的原理，知道它是"),t("strong",[v._v("如何来做的")]),v._v("，我强烈推荐你去读一读人人 FED 团队的文章"),t("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fwww.rrfed.com%2F2017%2F02%2F26%2Fchrome-layout%2F",target:"_blank",rel:"noopener noreferrer"}},[v._v("从 Chrome 源码看浏览器如何 layout 布局"),t("OutboundLink")],1),v._v("。")]),v._v(" "),t("p",[v._v("完整的流程图如下：")]),v._v(" "),t("p",[t("img",{attrs:{src:e(400),alt:""}})]),v._v(" "),t("h2",{attrs:{id:"_3-3-渲染"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-渲染"}},[v._v("#")]),v._v(" 3.3 渲染")]),v._v(" "),t("p",[v._v("构建完布局树后，紧接着的一个过程就是渲染，分为以下几个步骤：")]),v._v(" "),t("ul",[t("li",[v._v("建立"),t("code",[v._v("图层树")]),v._v("("),t("code",[v._v("Layer Tree")]),v._v(")")]),v._v(" "),t("li",[v._v("生成"),t("code",[v._v("绘制列表")])]),v._v(" "),t("li",[v._v("生成"),t("code",[v._v("图块")]),v._v("并"),t("code",[v._v("栅格化")])]),v._v(" "),t("li",[v._v("显示器显示内容")])]),v._v(" "),t("p",[v._v("（1）浏览器在构建完布局树之后，还会对特定的节点进行分层，构建一棵"),t("code",[v._v("图层树")]),v._v("："),t("strong",[v._v("节点的图层会默认属于父节点的图层（这些图层也称为合成层）")]),v._v("，那什么时候会提升为一个单独的合成层呢？有两种情况需要分别讨论，一种是"),t("strong",[v._v("显式合成")]),v._v("，一种是"),t("strong",[v._v("隐式合成")]),v._v("。")]),v._v(" "),t("p",[t("strong",[v._v("显式合成：")])]),v._v(" "),t("p",[v._v("一、 拥有"),t("strong",[v._v("层叠上下文")]),v._v("的节点。")]),v._v(" "),t("p",[v._v("层叠上下文也基本上是有一些特定的 CSS 属性创建的，一般有以下情况:")]),v._v(" "),t("ol",[t("li",[v._v("HTML 根元素本身就具有层叠上下文。")]),v._v(" "),t("li",[v._v("普通元素设置"),t("strong",[v._v("position 不为 static")]),v._v("并且"),t("strong",[v._v("设置了 z-index 属性")]),v._v("，会产生层叠上下文。")]),v._v(" "),t("li",[v._v("元素的 "),t("strong",[v._v("opacity")]),v._v(" 值不是 1")]),v._v(" "),t("li",[v._v("元素的 "),t("strong",[v._v("transform")]),v._v(" 值不是 none")]),v._v(" "),t("li",[v._v("元素的 "),t("strong",[v._v("filter")]),v._v(" 值不是 none")]),v._v(" "),t("li",[v._v("元素的 "),t("strong",[v._v("isolation")]),v._v(" 值是 isolate")]),v._v(" "),t("li",[t("strong",[v._v("will-change")]),v._v("指定的属性值为上面任意一个。")])]),v._v(" "),t("p",[v._v("二、需要"),t("strong",[v._v("剪裁")]),v._v("的地方。")]),v._v(" "),t("p",[v._v("比如一个 div，你只给他设置 100 * 100 像素的大小，而你在里面放了非常多的文字，那么超出的文字部分就需要被剪裁。当然如果出现了滚动条，那么滚动条会被单独提升为一个图层。")]),v._v(" "),t("p",[t("strong",[v._v("隐式合成：")])]),v._v(" "),t("p",[v._v("接下来是"),t("code",[v._v("隐式合成")]),v._v("，简单来说就是"),t("code",[v._v("层叠等级低")]),v._v("的节点被提升为单独的图层之后，那么"),t("code",[v._v("所有层叠等级比它高")]),v._v("的节点"),t("strong",[v._v("都会")]),v._v("成为一个单独的图层。位于复合层之上的元素会被创建复合层(B 的 z-index 大于 A，对 A 做动画，B 也会被塞进独立的复合层)很容易理解，A 在动画过程中可能会与 B 产生重叠，被 B 遮住，那么 GPU 需要每帧对 A 图层做动画，然后再与 B 图层合成，才能得到正确结果，所以 B 无论如何都要被塞进复合层，连同 A 一起交给 GPU。")]),v._v(" "),t("p",[v._v("这个隐式合成其实隐藏着巨大的风险，如果在一个大型应用中，当一个"),t("code",[v._v("z-index")]),v._v("比较低的元素被提升为单独图层之后，层叠在它上面的的元素统统都会被提升为单独的图层，可能会增加上千个图层，大大增加内存的压力，甚至直接让页面崩溃。这就是"),t("strong",[v._v("层爆炸")]),v._v("的原理。这里有一个具体的例子，"),t("a",{attrs:{href:"https://link.juejin.cn?target=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000014520786",target:"_blank",rel:"noopener noreferrer"}},[v._v("点击打开"),t("OutboundLink")],1),v._v("。")]),v._v(" "),t("p",[v._v("值得注意的是，当需要"),t("code",[v._v("repaint")]),v._v("时，只需要"),t("code",[v._v("repaint")]),v._v("本身，而不会影响到其他的层。")]),v._v(" "),t("p",[v._v("（2）"),t("strong",[v._v("接下来渲染引擎会将图层的绘制拆分成一个个绘制指令，比如先画背景、再描绘边框......然后将这些指令按顺序组合成一个待绘制列表，相当于给后面的绘制操作做了一波计划。")])]),v._v(" "),t("p",[v._v("（3）"),t("strong",[v._v("然后浏览器开始生成图块和位图：")])]),v._v(" "),t("p",[v._v("实际上在渲染进程中绘制操作是由专门的线程来完成的，这个线程叫"),t("strong",[v._v("合成线程")]),v._v("。")]),v._v(" "),t("p",[v._v("绘制列表准备好了之后，渲染进程的主线程会给"),t("code",[v._v("合成线程")]),v._v("发送"),t("code",[v._v("commit")]),v._v("消息，把绘制列表提交给合成线程。接下来就是合成线程一展宏图的时候啦。")]),v._v(" "),t("p",[v._v("首先，考虑到视口就这么大，当页面非常大的时候，要滑很长时间才能滑到底，如果要一口气全部绘制出来是相当浪费性能的。因此，合成线程要做的第一件事情就是将图层"),t("strong",[v._v("分块")]),v._v("。这些块的大小一般不会特别大，通常是 256 _ 256 或者 512 _ 512 这个规格。这样可以大大加速页面的首屏展示。")]),v._v(" "),t("p",[v._v("因为后面图块数据要进入 GPU 内存，考虑到浏览器内存上传到 GPU 内存的操作比较慢，即使是绘制一部分图块，也可能会耗费大量时间。针对这个问题，Chrome 采用了一个策略: 在首次合成图块时只采用一个"),t("strong",[v._v("低分辨率")]),v._v("的图片，这样首屏展示的时候只是展示出低分辨率的图片，这个时候继续进行合成操作，当正常的图块内容绘制完毕后，会将当前低分辨率的图块内容替换。这也是 Chrome 底层优化首屏加载速度的一个手段。")]),v._v(" "),t("p",[v._v("顺便提醒一点，渲染进程中专门维护了一个"),t("strong",[v._v("栅格化线程池")]),v._v("，专门负责把"),t("strong",[v._v("图块")]),v._v("转换为"),t("strong",[v._v("位图数据")]),v._v("。")]),v._v(" "),t("p",[v._v("然后合成线程会选择视口附近的"),t("strong",[v._v("图块")]),v._v("，把它交给"),t("strong",[v._v("栅格化线程池")]),v._v("生成位图。")]),v._v(" "),t("p",[v._v("生成位图的过程实际上都会使用 GPU 进行加速，生成的位图最后发送给"),t("code",[v._v("合成线程")]),v._v("。")]),v._v(" "),t("p",[v._v("（4）显示器显式内容")]),v._v(" "),t("p",[v._v("栅格化操作完成后，"),t("strong",[v._v("合成线程")]),v._v('会生成一个绘制命令，即"DrawQuad"，并发送给浏览器进程。')]),v._v(" "),t("p",[v._v("浏览器进程中的"),t("code",[v._v("viz组件")]),v._v("接收到这个命令，根据这个命令，把页面内容绘制到内存，也就是生成了页面，然后把这部分内存发送给显卡。为什么发给显卡呢？我想有必要先聊一聊显示器显示图像的原理。")]),v._v(" "),t("p",[v._v("无论是 PC 显示器还是手机屏幕，都有一个固定的刷新频率，一般是 60 HZ，即 60 帧，也就是一秒更新 60 张图片，一张图片停留的时间约为 16.7 ms。而每次更新的图片都来自显卡的"),t("strong",[v._v("前缓冲区")]),v._v("。而显卡接收到浏览器进程传来的页面后，会合成相应的图像，并将图像保存到"),t("strong",[v._v("后缓冲区")]),v._v("，然后系统自动将"),t("code",[v._v("前缓冲区")]),v._v("和"),t("code",[v._v("后缓冲区")]),v._v("对换位置，如此循环更新。")]),v._v(" "),t("p",[v._v("看到这里你也就是明白，当某个动画大量占用内存的时候，浏览器生成图像的时候会变慢，图像传送给显卡就会不及时，而显示器还是以不变的频率刷新，因此会出现卡顿，也就是明显的掉帧现象。")]),v._v(" "),t("p",[v._v("总体流程如下：")]),v._v(" "),t("p",[t("img",{attrs:{src:e(401),alt:""}})])])}),[],!1,null,null,null);_.default=s.exports}}]);